{"version":3,"file":"index.js","sources":["../lib/loadHnswlib.ts","../lib/constants.ts","../lib/index.ts"],"sourcesContent":["/***************** GENERATED FILE ********************/ \nimport { type HnswModuleFactory } from '.';\r\nimport { HnswlibModule } from './';\r\n\r\nlet library: Awaited<ReturnType<HnswModuleFactory>>;\r\ntype InputFsType = 'NODEFS' | 'IDBFS' | undefined;\r\n\r\nexport const initializeFileSystemAsync = async (inputFsType?: InputFsType): Promise<void> => {\r\n  const fsType = inputFsType == null ? 'IDBFS' : inputFsType;\r\n  const EmscriptenFileSystemManager = library.EmscriptenFileSystemManager;\r\n  return new Promise(function (resolve, reject) {\r\n    if (EmscriptenFileSystemManager.isInitialized()) {\r\n      resolve();\r\n      return;\r\n    }\r\n    EmscriptenFileSystemManager.initializeFileSystem(fsType);\r\n    // Use setTimeout to allow Emscripten to perform the filesystem operations.\r\n    setTimeout(function () {\r\n      if (EmscriptenFileSystemManager.isInitialized()) {\r\n        resolve();\r\n      } else {\r\n        reject(new Error('Failed to initialize filesystem'));\r\n      }\r\n    }, 0);\r\n  });\r\n};\r\n/**\r\n * Load the HNSW library in node or browser\r\n */\r\nexport const loadHnswlib = async (): Promise<HnswlibModule> => {\r\n  try {\r\n    // @ts-expect-error - hnswlib can be a global variable in the browser\r\n    if (typeof hnswlib !== 'undefined' && hnswlib !== null) {\r\n      // @ts-expect-error - hnswlib can be a global variable in the browser\r\n      const lib = hnswlib();\r\n      if (lib != null) return lib;\r\n    }\r\n\r\n    if (!library) {\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const temp = await import('./hnswlib-wasm.mjs');\r\n      const factory = temp.default;\r\n\r\n      library = await factory();\r\n      // console.log('Library initialized');\r\n      // await initializeFileSystemAsync(inputFsType);\r\n      return library; // Add this line\r\n    }\r\n    return library;\r\n  } catch (err) {\r\n    console.error('----------------------------------------');\r\n    console.error('Error initializing the library:', err);\r\n    throw err;\r\n  }\r\n};\r\n// loadHnswlib();\r\n \n/***************** GENERATED FILE ********************/ \n","/***************** GENERATED FILE ********************/ \nexport const defaultParams = {\r\n  /**\r\n   * Default parameters for the HNSW index.\r\n   * @param {number} m The maximum number of outgoing connections on the graph (default: 16).\r\n   * @param {number} efConstruction The parameter that controls speed/accuracy trade-off during the index construction (default: 200).\r\n   * @param {number} randomSeed The seed value of random number generator (default: 100).\r\n   * @param {boolean} allowReplaceDeleted The flag to replace deleted element when adding new element\r\n   *\r\n   */\r\n  initIndex: [16, 200, 100, false],\r\n  /**\r\n   * @param {boolean} replaceDeleted — The flag to replace a deleted element (default: false)\r\n   */\r\n  addPoint: [false],\r\n} as const;\r\n\r\nexport type defaultParamtersTypes = keyof typeof defaultParams;\r\n\r\nexport const hnswParamsForAda = {\r\n  m: 48,\r\n  efSearch: 24,\r\n  efConstruction: 32,\r\n  numNeighbors: 8,\r\n  dimensions: 1538,\r\n} as const;\r\n \n/***************** GENERATED FILE ********************/ \n","/***************** GENERATED FILE ********************/ \nimport type * as module from './hnswlib-wasm';\r\nimport type factory from './hnswlib-wasm';\r\nimport { loadHnswlib } from './loadHnswlib';\r\n\r\nexport type HierarchicalNSW = module.HierarchicalNSW;\r\nexport type BruteforceSearch = module.BruteforceSearch;\r\nexport type EmscriptenFileSystemManager = module.EmscriptenFileSystemManager;\r\nexport type L2Space = module.L2Space;\r\nexport type InnerProductSpace = module.InnerProductSpace;\r\n\r\nexport type HnswModuleFactory = typeof factory;\r\nexport type syncFs = HnswlibModule['syncFs'];\r\nexport type normalizePoint = HnswlibModule['normalizePoint'];\r\nexport const IDBFS_STORE_NAME = 'FILE_DATA';\r\n\r\nexport * from './constants';\r\n\r\nconst lib = await loadHnswlib();\r\nexport default lib;\r\n\r\nexport interface HnswlibModule extends Omit<EmscriptenModule, '_malloc' | '_free'> {\r\n  normalizePoint(vec: number[]): number[];\r\n  /**\r\n   * Syncs the Emscripten file system with the persistent storage IDBFS.\r\n   * @param read read (bool) – true to initialize Emscripten’s file system data with the data from the file system’s persistent source, and false to save Emscripten`s file system data to the file system’s persistent source.\r\n   * @returns\r\n   */\r\n  syncFs: (read: boolean) => Promise<boolean>;\r\n  L2Space: typeof module.L2Space;\r\n  InnerProductSpace: typeof module.InnerProductSpace;\r\n  BruteforceSearch: typeof module.BruteforceSearch;\r\n  HierarchicalNSW: typeof module.HierarchicalNSW;\r\n  EmscriptenFileSystemManager: typeof module.EmscriptenFileSystemManager;\r\n  asm: {\r\n    malloc(size: number): number;\r\n    free(ptr: number): void;\r\n  };\r\n}\r\n\r\n/**\r\n * Adds items and their corresponding labels to the HierarchicalNSW index using memory pointers.\r\n * This function handles the memory allocation for the Emscripten Module, and properly frees the memory after use.  its a wrapper around {@link HierarchicalNSW#addItemsWithPtrs}\r\n *\r\n * ⛔️ This function is only 1.02x faster than vectors for 10k points version which are easier to use.  The sole advantage is memory savings\r\n *\r\n * @async\r\n * @param {HnswlibModule} Module - The Emscripten HNSWLIB Module object.\r\n * @param {HierarchicalNSW} index - The HierarchicalNSW index object.\r\n * @param {Float32Array[] | number[][]} items - An array of item vectors to be added to the search index. Each item should be a Float32Array or an array of numbers.\r\n * @param {number[]} labels - An array of numeric labels corresponding to the items. The length of the labels array should match the length of the items array.\r\n * @param {boolean} replaceDeleted - A flag to determine if deleted elements should be replaced (default: false).\r\n * @returns {Promise<void>} A promise that resolves once the items and labels have been added to the index.\r\n */\r\nexport const addItemsWithPtrsHelper = async (\r\n  Module: HnswlibModule,\r\n  index: HierarchicalNSW,\r\n  items: Float32Array[] | number[][],\r\n  labels: number[],\r\n  replaceDeleted: boolean\r\n): Promise<void> => {\r\n  const itemCount = items.length;\r\n  const dim = items[0].length;\r\n\r\n  // Flatten the items array into a Float32Array\r\n  const flatItems = new Float32Array(itemCount * dim);\r\n  items.forEach((vec, i) => {\r\n    flatItems.set(vec, i * dim);\r\n  });\r\n\r\n  // Convert labels to a Uint32Array\r\n  const labelsArray = new Uint32Array(labels);\r\n\r\n  const vecDataPtr = Module.asm.malloc(flatItems.length * Float32Array.BYTES_PER_ELEMENT);\r\n  const labelVecDataPtr = Module.asm.malloc(labelsArray.length * Uint32Array.BYTES_PER_ELEMENT);\r\n\r\n  if (vecDataPtr === 0) {\r\n    throw new Error('Failed to allocate memory for vecDataPtr.');\r\n  }\r\n\r\n  if (labelVecDataPtr === 0) {\r\n    throw new Error('Failed to allocate memory for labelVecDataPtr.');\r\n  }\r\n\r\n  Module.HEAPF32.set(flatItems, vecDataPtr / Float32Array.BYTES_PER_ELEMENT);\r\n  Module.HEAPU32.set(labelsArray, labelVecDataPtr / Uint32Array.BYTES_PER_ELEMENT);\r\n\r\n  await index.addItemsWithPtr(\r\n    Module.HEAPF32.subarray(\r\n      Math.floor(vecDataPtr / Float32Array.BYTES_PER_ELEMENT),\r\n      Math.floor(vecDataPtr / Float32Array.BYTES_PER_ELEMENT) + itemCount * dim\r\n    ),\r\n    itemCount * dim,\r\n    Module.HEAPU32.subarray(\r\n      Math.floor(labelVecDataPtr / Uint32Array.BYTES_PER_ELEMENT),\r\n      Math.floor(labelVecDataPtr / Uint32Array.BYTES_PER_ELEMENT) + itemCount\r\n    ),\r\n    itemCount,\r\n    replaceDeleted\r\n  );\r\n\r\n  Module.asm.free(vecDataPtr);\r\n  Module.asm.free(labelVecDataPtr);\r\n};\r\n \n/***************** GENERATED FILE ********************/ \n"],"names":[],"mappings":"AAIA,IAAI,OAAA,CAAA;AAyBG,MAAM,cAAc,YAAoC;AAC7D,EAAI,IAAA;AAEF,IAAA,IAAI,OAAO,OAAA,KAAY,WAAe,IAAA,OAAA,KAAY,IAAM,EAAA;AAEtD,MAAA,MAAM,MAAM,OAAQ,EAAA,CAAA;AACpB,MAAA,IAAI,GAAO,IAAA,IAAA;AAAM,QAAO,OAAA,GAAA,CAAA;AAAA,KAC1B;AAEA,IAAA,IAAI,CAAC,OAAS,EAAA;AAGZ,MAAM,MAAA,IAAA,GAAO,MAAM,OAAO,mBAAoB,CAAA,CAAA;AAC9C,MAAA,MAAM,UAAU,IAAK,CAAA,OAAA,CAAA;AAErB,MAAA,OAAA,GAAU,MAAM,OAAQ,EAAA,CAAA;AAGxB,MAAO,OAAA,OAAA,CAAA;AAAA,KACT;AACA,IAAO,OAAA,OAAA,CAAA;AAAA,WACA,GAAP,EAAA;AACA,IAAA,OAAA,CAAQ,MAAM,0CAA0C,CAAA,CAAA;AACxD,IAAQ,OAAA,CAAA,KAAA,CAAM,mCAAmC,GAAG,CAAA,CAAA;AACpD,IAAM,MAAA,GAAA,CAAA;AAAA,GACR;AACF,CAAA;;ACtDO,MAAM,aAAgB,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS3B,SAAW,EAAA,CAAC,EAAI,EAAA,GAAA,EAAK,KAAK,KAAK,CAAA;AAAA;AAAA;AAAA;AAAA,EAI/B,QAAA,EAAU,CAAC,KAAK,CAAA;AAClB,EAAA;AAIO,MAAM,gBAAmB,GAAA;AAAA,EAC9B,CAAG,EAAA,EAAA;AAAA,EACH,QAAU,EAAA,EAAA;AAAA,EACV,cAAgB,EAAA,EAAA;AAAA,EAChB,YAAc,EAAA,CAAA;AAAA,EACd,UAAY,EAAA,IAAA;AACd;;ACXO,MAAM,gBAAmB,GAAA,YAAA;AAI1B,MAAA,GAAA,GAAM,MAAM,WAAY,GAAA;AAoCvB,MAAM,yBAAyB,OACpC,MAAA,EACA,KACA,EAAA,KAAA,EACA,QACA,cACkB,KAAA;AAClB,EAAA,MAAM,YAAY,KAAM,CAAA,MAAA,CAAA;AACxB,EAAM,MAAA,GAAA,GAAM,KAAM,CAAA,CAAC,CAAE,CAAA,MAAA,CAAA;AAGrB,EAAA,MAAM,SAAY,GAAA,IAAI,YAAa,CAAA,SAAA,GAAY,GAAG,CAAA,CAAA;AAClD,EAAM,KAAA,CAAA,OAAA,CAAQ,CAAC,GAAA,EAAK,CAAM,KAAA;AACxB,IAAU,SAAA,CAAA,GAAA,CAAI,GAAK,EAAA,CAAA,GAAI,GAAG,CAAA,CAAA;AAAA,GAC3B,CAAA,CAAA;AAGD,EAAM,MAAA,WAAA,GAAc,IAAI,WAAA,CAAY,MAAM,CAAA,CAAA;AAE1C,EAAA,MAAM,aAAa,MAAO,CAAA,GAAA,CAAI,OAAO,SAAU,CAAA,MAAA,GAAS,aAAa,iBAAiB,CAAA,CAAA;AACtF,EAAA,MAAM,kBAAkB,MAAO,CAAA,GAAA,CAAI,OAAO,WAAY,CAAA,MAAA,GAAS,YAAY,iBAAiB,CAAA,CAAA;AAE5F,EAAA,IAAI,eAAe,CAAG,EAAA;AACpB,IAAM,MAAA,IAAI,MAAM,2CAA2C,CAAA,CAAA;AAAA,GAC7D;AAEA,EAAA,IAAI,oBAAoB,CAAG,EAAA;AACzB,IAAM,MAAA,IAAI,MAAM,gDAAgD,CAAA,CAAA;AAAA,GAClE;AAEA,EAAA,MAAA,CAAO,OAAQ,CAAA,GAAA,CAAI,SAAW,EAAA,UAAA,GAAa,aAAa,iBAAiB,CAAA,CAAA;AACzE,EAAA,MAAA,CAAO,OAAQ,CAAA,GAAA,CAAI,WAAa,EAAA,eAAA,GAAkB,YAAY,iBAAiB,CAAA,CAAA;AAE/E,EAAA,MAAM,KAAM,CAAA,eAAA;AAAA,IACV,OAAO,OAAQ,CAAA,QAAA;AAAA,MACb,IAAK,CAAA,KAAA,CAAM,UAAa,GAAA,YAAA,CAAa,iBAAiB,CAAA;AAAA,MACtD,KAAK,KAAM,CAAA,UAAA,GAAa,YAAa,CAAA,iBAAiB,IAAI,SAAY,GAAA,GAAA;AAAA,KACxE;AAAA,IACA,SAAY,GAAA,GAAA;AAAA,IACZ,OAAO,OAAQ,CAAA,QAAA;AAAA,MACb,IAAK,CAAA,KAAA,CAAM,eAAkB,GAAA,WAAA,CAAY,iBAAiB,CAAA;AAAA,MAC1D,IAAK,CAAA,KAAA,CAAM,eAAkB,GAAA,WAAA,CAAY,iBAAiB,CAAI,GAAA,SAAA;AAAA,KAChE;AAAA,IACA,SAAA;AAAA,IACA,cAAA;AAAA,GACF,CAAA;AAEA,EAAO,MAAA,CAAA,GAAA,CAAI,KAAK,UAAU,CAAA,CAAA;AAC1B,EAAO,MAAA,CAAA,GAAA,CAAI,KAAK,eAAe,CAAA,CAAA;AACjC;;;;"}